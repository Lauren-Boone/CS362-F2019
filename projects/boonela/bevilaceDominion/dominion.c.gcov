        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30180 returned 100% blocks executed 83%
    30180:    8:int compare(const void* a, const void* b) {
    30180:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:        return 1;
    30180:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     8048:   12:        return -1;
    22132:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 3010 returned 100% blocks executed 89%
     3010:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
     3010:   44:    SelectStream(1);
call    0 returned 100%
     3010:   45:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:    //check number of players
     3010:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
     3010:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
    13076:   57:    for (i = 0; i < 10; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:   58:    {
   116744:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   106678:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        -:   62:            {
     2004:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
     1006:   73:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
     1006:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
     1006:   87:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
     1006:   89:        state->supplyCount[estate] = 8;
     1006:   90:        state->supplyCount[duchy] = 8;
     1006:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
     1006:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
     1006:  102:    state->supplyCount[silver] = 40;
     1006:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
    21126:  106:    for (i = adventurer; i <= treasure_map; i++)        //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   165990:  108:        for (j = 0; j < 10; j++)                //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:        {
   155930:  110:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
    10060:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:                {
     2016:  115:                    if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1008:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
    #####:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
     9052:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
    10060:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
   145870:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
     3018:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  141:    {
     2012:  142:        state->deckCount[i] = 0;
     8048:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:        {
     6036:  145:            state->deck[i][j] = estate;
     6036:  146:            state->deckCount[i]++;
        -:  147:        }
    16096:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:        {
    14084:  150:            state->deck[i][j] = copper;
    14084:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
     3018:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  157:    {
     2012:  158:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
     3018:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  166:    {
        -:  167:        //initialize hand size to zero
     2012:  168:        state->handCount[i] = 0;
     2012:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //  {
        -:  173:        //    drawCard(i, state);
        -:  174:        //  }
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
    28168:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
    27162:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
     1006:  184:    state->outpostPlayed = 0;
     1006:  185:    state->phase = 0;
     1006:  186:    state->numActions = 1;
     1006:  187:    state->numBuys = 1;
     1006:  188:    state->playedCardCount = 0;
     1006:  189:    state->whoseTurn = 0;
     1006:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
     6036:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5030:  195:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:    }
        -:  197:
     1006:  198:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
     1006:  200:    return 0;
        -:  201:}
        -:  202:
function shuffle called 3012 returned 100% blocks executed 94%
     3012:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
     3012:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
     3012:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:        return -1;
     3012:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
    27144:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
    21120:  217:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    21120:  218:        newDeck[newDeckPos] = state->deck[player][card];
    21120:  219:        newDeckPos++;
    71420:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
    50300:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
    21120:  223:        state->deckCount[player]--;
        -:  224:    }
    24132:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
    21120:  226:        state->deck[player][i] = newDeck[i];
    21120:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
     3012:  230:    return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0;         //tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
call    0 never executed
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:
    #####:  271:    return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
        -:  311:}
        -:  312:
function numHandCards called 2 returned 100% blocks executed 100%
        2:  313:int numHandCards(struct gameState *state) {
        2:  314:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 696 returned 100% blocks executed 100%
      696:  322:int supplyCount(int card, struct gameState *state) {
      696:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 2 returned 100% blocks executed 100%
        2:  348:int whoseTurn(struct gameState *state) {
        2:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
        -:  409:        }
        -:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
        -:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
        -:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
        -:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
        -:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
        -:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
        -:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
        -:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
        -:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
        -:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
        -:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
        -:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
        -:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
        -:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
        -:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
        -:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  489:        };
        -:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 7114 returned 100% blocks executed 38%
     7114:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
     7114:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
    #####:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
    #####:  576:        state->deckCount[player] = state->discardCount[player];
    #####:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
    #####:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
    #####:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
    #####:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
    #####:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
    #####:  597:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
     7114:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
     7114:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
     7114:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     7114:  614:        state->deckCount[player]--;
     7114:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
     7114:  618:    return 0;
        -:  619:}
        -:  620:
function getCost called 6 returned 100% blocks executed 23%
        6:  621:int getCost(int cardNumber)
        -:  622:{
        6:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 17%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 17%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 17%
branch 27 taken 17%
        -:  624:    {
        -:  625:    case curse:
    #####:  626:        return 0;
        -:  627:    case estate:
        2:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
        1:  634:        return 0;
        -:  635:    case silver:
    #####:  636:        return 3;
        -:  637:    case gold:
    #####:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
        1:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
        1:  678:        return 4;
        -:  679:    }
        -:  680:
        1:  681:    return -1;
        -:  682:}
        -:  683:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  684:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  685:{
        -:  686:    int i;
        -:  687:    int j;
        -:  688:    int k;
        -:  689:    int x;
        -:  690:    int index;
    #####:  691:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  692:    int nextPlayer = currentPlayer + 1;
        -:  693:
        -:  694:    int temphand[MAX_HAND];// moved above the if statement
    #####:  695:    int drawntreasure=0;
        -:  696:    int cardDrawn;
    #####:  697:    int z = 0;// this is the counter for the temp hand
    #####:  698:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  699:        nextPlayer = 0;
        -:  700:    }
        -:  701:
        -:  702:
        -:  703:    //uses switch to select card and perform actions
    #####:  704:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  705:    {
        -:  706:    case adventurer:
    #####:  707:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  708:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  709:                shuffle(currentPlayer, state);
call    0 never executed
        -:  710:            }
    #####:  711:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  712:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  713:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  714:                drawntreasure++;
        -:  715:            else {
    #####:  716:                temphand[z]=cardDrawn;
    #####:  717:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  718:                z++;
        -:  719:            }
        -:  720:        }
    #####:  721:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  722:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  723:            z=z-1;
        -:  724:        }
    #####:  725:        return 0;
        -:  726:
        -:  727:    case council_room:
        -:  728:        //+4 Cards
    #####:  729:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  730:        {
    #####:  731:            drawCard(currentPlayer, state);
call    0 never executed
        -:  732:        }
        -:  733:
        -:  734:        //+1 Buy
    #####:  735:        state->numBuys++;
        -:  736:
        -:  737:        //Each other player draws a card
    #####:  738:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  739:        {
    #####:  740:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  741:            {
    #####:  742:                drawCard(i, state);
call    0 never executed
        -:  743:            }
        -:  744:        }
        -:  745:
        -:  746:        //put played card in played card pile
    #####:  747:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  748:
    #####:  749:        return 0;
        -:  750:
        -:  751:    case feast:
        -:  752:        //gain card with cost up to 5
        -:  753:        //Backup hand
    #####:  754:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  755:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  756:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  757:        }
        -:  758:        //Backup hand
        -:  759:
        -:  760:        //Update Coins for Buy
    #####:  761:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  762:        x = 1;//Condition to loop on
    #####:  763:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  764:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  765:                if (DEBUG)
        -:  766:                    printf("None of that card left, sorry!\n");
        -:  767:
        -:  768:                if (DEBUG) {
        -:  769:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  770:                }
        -:  771:            }
    #####:  772:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  773:                printf("That card is too expensive!\n");
call    0 never executed
        -:  774:
        -:  775:                if (DEBUG) {
        -:  776:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  777:                }
        -:  778:            }
        -:  779:            else {
        -:  780:
        -:  781:                if (DEBUG) {
        -:  782:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  783:                }
        -:  784:
    #####:  785:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  786:                x = 0;//No more buying cards
        -:  787:
        -:  788:                if (DEBUG) {
        -:  789:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  790:                }
        -:  791:
        -:  792:            }
        -:  793:        }
        -:  794:
        -:  795:        //Reset Hand
    #####:  796:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  797:            state->hand[currentPlayer][i] = temphand[i];
    #####:  798:            temphand[i] = -1;
        -:  799:        }
        -:  800:        //Reset Hand
        -:  801:
    #####:  802:        return 0;
        -:  803:
        -:  804:    case gardens:
    #####:  805:        return -1;
        -:  806:
        -:  807:    case mine:
    #####:  808:        return playMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  809:
        -:  810:    case remodel:
    #####:  811:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  812:
    #####:  813:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  814:        {
    #####:  815:            return -1;
        -:  816:        }
        -:  817:
    #####:  818:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  819:
        -:  820:        //discard card from hand
    #####:  821:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  822:
        -:  823:        //discard trashed card
    #####:  824:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  825:        {
    #####:  826:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  827:            {
    #####:  828:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  829:                break;
        -:  830:            }
        -:  831:        }
        -:  832:
    #####:  833:        return 0;
        -:  834:
        -:  835:    case smithy:
        -:  836:        //+3 Cards
    #####:  837:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  838:        {
    #####:  839:            drawCard(currentPlayer, state);
call    0 never executed
        -:  840:        }
        -:  841:
        -:  842:        //discard card from hand
    #####:  843:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  844:        return 0;
        -:  845:
        -:  846:    case village:
        -:  847:        //+1 Card
    #####:  848:        drawCard(currentPlayer, state);
call    0 never executed
        -:  849:
        -:  850:        //+2 Actions
    #####:  851:        state->numActions = state->numActions + 2;
        -:  852:
        -:  853:        //discard played card from hand
    #####:  854:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  855:        return 0;
        -:  856:
        -:  857:    case baron:
    #####:  858:        return playBaron(state, currentPlayer, choice1, handPos);
call    0 never executed
        -:  859:
        -:  860:    case great_hall:
        -:  861:        //+1 Card
    #####:  862:        drawCard(currentPlayer, state);
call    0 never executed
        -:  863:
        -:  864:        //+1 Actions
    #####:  865:        state->numActions++;
        -:  866:
        -:  867:        //discard card from hand
    #####:  868:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  869:        return 0;
        -:  870:
        -:  871:    case minion:
    #####:  872:        return playMinion(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  873:
        -:  874:    case steward:
    #####:  875:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  876:        {
        -:  877:            //+2 cards
    #####:  878:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  879:            drawCard(currentPlayer, state);
call    0 never executed
        -:  880:        }
    #####:  881:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  882:        {
        -:  883:            //+2 coins
    #####:  884:            state->coins = state->coins + 2;
        -:  885:        }
        -:  886:        else
        -:  887:        {
        -:  888:            //trash 2 cards in hand
    #####:  889:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  890:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  891:        }
        -:  892:
        -:  893:        //discard card from hand
    #####:  894:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  895:        return 0;
        -:  896:
        -:  897:    case tribute:
    #####:  898:        return playTribute(state, currentPlayer, nextPlayer, handPos);
call    0 never executed
        -:  899:
        -:  900:    case ambassador:
    #####:  901:        return playAmbassador(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  902:
        -:  903:    case cutpurse:
        -:  904:
    #####:  905:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  906:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  907:        {
    #####:  908:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  909:            {
    #####:  910:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  911:                {
    #####:  912:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  913:                    {
    #####:  914:                        discardCard(j, i, state, 0);
call    0 never executed
    #####:  915:                        break;
        -:  916:                    }
    #####:  917:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  918:                    {
    #####:  919:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  920:                        {
        -:  921:                            if (DEBUG)
        -:  922:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  923:                        }
    #####:  924:                        break;
        -:  925:                    }
        -:  926:                }
        -:  927:
        -:  928:            }
        -:  929:
        -:  930:        }
        -:  931:
        -:  932:        //discard played card from hand
    #####:  933:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  934:
    #####:  935:        return 0;
        -:  936:
        -:  937:
        -:  938:    case embargo:
        -:  939:        //+2 Coins
    #####:  940:        state->coins = state->coins + 2;
        -:  941:
        -:  942:        //see if selected pile is in play
    #####:  943:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  944:        {
    #####:  945:            return -1;
        -:  946:        }
        -:  947:
        -:  948:        //add embargo token to selected supply pile
    #####:  949:        state->embargoTokens[choice1]++;
        -:  950:
        -:  951:        //trash card
    #####:  952:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  953:        return 0;
        -:  954:
        -:  955:    case outpost:
        -:  956:        //set outpost flag
    #####:  957:        state->outpostPlayed++;
        -:  958:
        -:  959:        //discard card
    #####:  960:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  961:        return 0;
        -:  962:
        -:  963:    case salvager:
        -:  964:        //+1 buy
    #####:  965:        state->numBuys++;
        -:  966:
    #####:  967:        if (choice1)
branch  0 never executed
branch  1 never executed
        -:  968:        {
        -:  969:            //gain coins equal to trashed card
    #####:  970:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  971:            //trash card
    #####:  972:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  973:        }
        -:  974:
        -:  975:        //discard card
    #####:  976:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  977:        return 0;
        -:  978:
        -:  979:    case sea_hag:
    #####:  980:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  981:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  982:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  983:                state->deckCount[i]--;
    #####:  984:                state->discardCount[i]++;
    #####:  985:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  986:            }
        -:  987:        }
    #####:  988:        return 0;
        -:  989:
        -:  990:    case treasure_map:
        -:  991:        //search hand for another treasure_map
    #####:  992:        index = -1;
    #####:  993:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  994:        {
    #####:  995:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  996:            {
    #####:  997:                index = i;
    #####:  998:                break;
        -:  999:            }
        -: 1000:        }
    #####: 1001:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1002:        {
        -: 1003:            //trash both treasure cards
    #####: 1004:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1005:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1006:
        -: 1007:            //gain 4 Gold cards
    #####: 1008:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1009:            {
    #####: 1010:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1011:            }
        -: 1012:
        -: 1013:            //return success
    #####: 1014:            return 1;
        -: 1015:        }
        -: 1016:
        -: 1017:        //no second treasure_map found in hand
    #####: 1018:        return -1;
        -: 1019:    }
        -: 1020:
    #####: 1021:    return -1;
        -: 1022:}
        -: 1023:
function discardCard called 70116 returned 100% blocks executed 100%
    70116: 1024:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1025:{
        -: 1026:
        -: 1027:    //if card is not trashed, added to Played pile
    70116: 1028:    if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1029:    {
        -: 1030:        //add card to played pile
    70116: 1031:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    70116: 1032:        state->playedCardCount++;
        -: 1033:    }
        -: 1034:
        -: 1035:    //set played card to -1
    70116: 1036:    state->hand[currentPlayer][handPos] = -1;
        -: 1037:
        -: 1038:    //remove card from player's hand
    70116: 1039:    if ( handPos == (state->handCount[currentPlayer] - 1) )     //last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1040:    {
        -: 1041:        //reduce number of cards in hand
      561: 1042:        state->handCount[currentPlayer]--;
        -: 1043:    }
    69555: 1044:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1045:    {
        -: 1046:        //reduce number of cards in hand
        1: 1047:        state->handCount[currentPlayer]--;
        -: 1048:    }
        -: 1049:    else
        -: 1050:    {
        -: 1051:        //replace discarded card with last card in hand
    69554: 1052:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1053:        //set last card to -1
    69554: 1054:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1055:        //reduce number of cards in hand
    69554: 1056:        state->handCount[currentPlayer]--;
        -: 1057:    }
        -: 1058:
    70116: 1059:    return 0;
        -: 1060:}
        -: 1061:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1062:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1063:{
        -: 1064:    //Note: supplyPos is enum of choosen card
        -: 1065:
        -: 1066:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1067:    if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1068:    {
    #####: 1069:        return -1;
        -: 1070:    }
        -: 1071:
        -: 1072:    //added card for [whoseTurn] current player:
        -: 1073:    // toFlag = 0 : add to discard
        -: 1074:    // toFlag = 1 : add to deck
        -: 1075:    // toFlag = 2 : add to hand
        -: 1076:
    #####: 1077:    if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1078:    {
    #####: 1079:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1080:        state->deckCount[player]++;
        -: 1081:    }
    #####: 1082:    else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1083:    {
    #####: 1084:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1085:        state->handCount[player]++;
        -: 1086:    }
        -: 1087:    else
        -: 1088:    {
    #####: 1089:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1090:        state->discardCount[player]++;
        -: 1091:    }
        -: 1092:
        -: 1093:    //decrease number in supply pile
    #####: 1094:    state->supplyCount[supplyPos]--;
        -: 1095:
    #####: 1096:    return 0;
        -: 1097:}
        -: 1098:
function updateCoins called 1006 returned 100% blocks executed 82%
     1006: 1099:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1100:{
        -: 1101:    int i;
        -: 1102:
        -: 1103:    //reset coin count
     1006: 1104:    state->coins = 0;
        -: 1105:
        -: 1106:    //add coins for each Treasure card in player's hand
     6036: 1107:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1108:    {
     5030: 1109:        if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1110:        {
     4024: 1111:            state->coins += 1;
        -: 1112:        }
     1006: 1113:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1114:        {
    #####: 1115:            state->coins += 2;
        -: 1116:        }
     1006: 1117:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1118:        {
    #####: 1119:            state->coins += 3;
        -: 1120:        }
        -: 1121:    }
        -: 1122:
        -: 1123:    //add bonus
     1006: 1124:    state->coins += bonus;
        -: 1125:
     1006: 1126:    return 0;
        -: 1127:}
        -: 1128:
        -: 1129:
        -: 1130:
        -: 1131:/******************************************************************************
        -: 1132:                            Refactored Card Effects
        -: 1133:******************************************************************************/
function playBaron called 1002 returned 100% blocks executed 75%
     1002: 1134:int playBaron(struct gameState* state, int currentPlayer, int discardEst, int handPos) {
        -: 1135:    
     1002: 1136:    int i = 0;
        -: 1137:    
        -: 1138:    // bool flag for discard of estate
     1002: 1139:    int cardDiscarded = 0; 
        -: 1140:    
        -: 1141:    // +1 buy
     1002: 1142:    state->numBuys++;
        -: 1143:
        -: 1144:    // player chose to discard estate for $
     1002: 1145:    if (discardEst) 
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1146:    {   
        -: 1147:        // iterate over cards until hand exhausted or estate card found
        -: 1148:        // BUG (INTRODUCED) #1 -- should be  for (i = 0; i < state->handCount[currentPlayer] && !cardDiscarded; i++)
        -: 1149:        // BUG (INTRODUCED) #2 -- also should be   i = 0  not  i = 1
     9694: 1150:        for (i = 1; i < state->handCount[currentPlayer]; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -: 1151:        {
        -: 1152:            // estate card found
     8694: 1153:            if (state->hand[currentPlayer][i] == estate) 
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1154:            {
        -: 1155:                // +4 coins
      338: 1156:                state->coins += 4;
        -: 1157:                // discard estate card
      338: 1158:                discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        -: 1159:                // exit loop
      338: 1160:                cardDiscarded = 1;
        -: 1161:            }
        -: 1162:        }
        -: 1163:        
        -: 1164:        // no estate cards found in hand
        -: 1165:        if (!cardDiscarded && DEBUG) 
        -: 1166:        {
        -: 1167:            printf("No estate cards in your hand, invalid choice\n");
        -: 1168:            printf("Must gain an estate if there are any\n");
        -: 1169:        }
        -: 1170:    }
        -: 1171:    
        -: 1172:    // player either chose to gain estate (no discard), or to discard estate but none found in hand 
     1002: 1173:    if (!cardDiscarded)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1174:    {   
        -: 1175:        // if estates exist, player gains 1 from supply
      696: 1176:        if (supplyCount(estate, state) > 0) 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1177:        {
    #####: 1178:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1179:            state->supplyCount[estate]--;
    #####: 1180:            if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1181:            {
    #####: 1182:                isGameOver(state);
call    0 never executed
        -: 1183:            }
        -: 1184:        }
        -: 1185:    }
        -: 1186:
     1002: 1187:    return 0;   
        -: 1188:}
        -: 1189:
function playMinion called 1002 returned 100% blocks executed 100%
     1002: 1190:int playMinion(struct gameState* state, int currentPlayer, int gainCoins, int attack, int handPos) {
        -: 1191:    
     1002: 1192:    int p = 0;
     1002: 1193:    int j = 0;
        -: 1194:    
        -: 1195:    // +1 action
     1002: 1196:    state->numActions++;
        -: 1197:
        -: 1198:    // discard card from hand
     1002: 1199:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1200:
     1002: 1201:    if (gainCoins)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1202:    {
        -: 1203:        // BUG (INTRODUCED) #1 -- should be   state->coins = state->coins + 2;
      500: 1204:        state->coins = state->coins + 4;
        -: 1205:    }
        -: 1206:    
      502: 1207:    else if (attack)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -: 1208:    {
      786: 1209:        for (p = 0; p < state->numPlayers; p++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1210:        {
        -: 1211:            // current player or any other player with 5+ cards in hand
        -: 1212:            // BUG (INTRODUCED) #2 --  should be   if (p == currentPlayer || (p != currentPlayer && state->handCount[p] > 4) )
      524: 1213:            if (p == currentPlayer || p != currentPlayer && state->handCount[p] > 4)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
        -: 1214:            {
        -: 1215:                // discard hand & draw 4
    69818: 1216:                while(state->handCount[p] > 0)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1217:                {
    68776: 1218:                    discardCard(handPos, p, state, 0);
call    0 returned 100%
        -: 1219:                }
     2605: 1220:                for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1221:                {
     2084: 1222:                    drawCard(p, state);
call    0 returned 100%
        -: 1223:                }
        -: 1224:            }
        -: 1225:        }
        -: 1226:    }
        -: 1227:    
     1002: 1228:    return 0;
        -: 1229:}
        -: 1230:
function playAmbassador called 2 returned 100% blocks executed 40%
        2: 1231:int playAmbassador(struct gameState* state, int currentPlayer, int revCardLoc, int numToRet, int handPos) {
        -: 1232:    
        2: 1233:    int i = 0;
        2: 1234:    int j = 0;
        -: 1235:    
        -: 1236:    // card type of revealed card
        2: 1237:    int revCard = state->hand[currentPlayer][revCardLoc];       
        -: 1238:    
        -: 1239:    // can only select 0, 1, or 2 to return to supply
        2: 1240:    if (numToRet > 2 || numToRet < 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1241:    {
    #####: 1242:        return -1;
        -: 1243:    }
        -: 1244:    // card cannot be Ambassador itself(?)
        2: 1245:    if (revCardLoc == handPos)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1246:    {
        1: 1247:        return -1;
        -: 1248:    }
        -: 1249:    // count number of copies of type selected for return
        6: 1250:    for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1251:    {
        -: 1252:        // only count if not top card, and is same type as revealed card but not revealed card itself
        -: 1253:        // BUG (INTRODUCED) # 1 -- should be (i != handPos && i == revCard && i != revCardLoc)
        5: 1254:        if (i != handPos && i == revCard)           // BUG (EXISTING) -- 2nd cond should be  state->hand[currentPlayer][i] == revCard  
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1255:        {
    #####: 1256:            j++;
        -: 1257:        }
        -: 1258:    }
        -: 1259:    // not enough cards in hand to return
        1: 1260:    if (j < numToRet)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1261:    {
        1: 1262:        return -1;
        -: 1263:    }
        -: 1264:
        -: 1265:    if (DEBUG)
        -: 1266:        printf("Player %d reveals card number: %d\n", currentPlayer, revCard);
        -: 1267:
        -: 1268:    // each other player gains a copy of revealed card
    #####: 1269:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1270:    {
    #####: 1271:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1272:        {
    #####: 1273:            gainCard(revCard, state, 0, i);
call    0 never executed
        -: 1274:        }
        -: 1275:    }
        -: 1276:    
        -: 1277:    // BUG (INTRODUCED) #2 -- code fine but should be played ABOVE for loop above, not below
        -: 1278:    // increase supply count for chosen card by number being discarded
    #####: 1279:    state->supplyCount[revCard] += numToRet;
        -: 1280:
        -: 1281:    // discard Ambassador
    #####: 1282:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1283:
        -: 1284:    // trash copies of cards already returned to supply
    #####: 1285:    for (j = 0; j < numToRet; j++)
branch  0 never executed
branch  1 never executed
        -: 1286:    {
    #####: 1287:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1288:        {
    #####: 1289:            if (state->hand[currentPlayer][i] == revCard)
branch  0 never executed
branch  1 never executed
        -: 1290:            {
    #####: 1291:                discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1292:                break;
        -: 1293:            }
        -: 1294:        }
        -: 1295:    }
        -: 1296:
    #####: 1297:    return 0;
        -: 1298:}
        -: 1299:
function playTribute called 4002 returned 100% blocks executed 89%
     4002: 1300:int playTribute(struct gameState* state, int currentPlayer, int nextPlayer, int handPos) {
        -: 1301:    
     4002: 1302:    int i = 0;
        -: 1303:
        -: 1304:    // initialize revealed cards
     4002: 1305:    int revCards[2] = {-1, -1};
        -: 1306:        
        -: 1307:    // next player has only 1 card btwn deck & discard piles or 0 in both
     4002: 1308:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1309:    {
     3000: 1310:        if (state->deckCount[nextPlayer] > 0) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1311:        {
        -: 1312:            // reveal only card in deck
    #####: 1313:            revCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1314:            state->deckCount[nextPlayer]--;                         // BUG (EXISTING) -- not discarding afterwards
        -: 1315:        }
     3000: 1316:        else if (state->discardCount[nextPlayer] > 0) 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1317:        {
        -: 1318:            // reveal only card in discard
      999: 1319:            revCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
      999: 1320:            state->discardCount[nextPlayer]--;
        -: 1321:        }
        -: 1322:        else 
        -: 1323:        {
        -: 1324:            // both piles empty
        -: 1325:            if (DEBUG) 
        -: 1326:            {
        -: 1327:                printf("No cards to reveal\n");
        -: 1328:            }
        -: 1329:        }
        -: 1330:    }
        -: 1331:    
        -: 1332:    // next player has at least 2 cards btwn deck & discard
        -: 1333:    else {
        -: 1334:        // cards in discard but none in deck
     1002: 1335:        if (state->deckCount[nextPlayer] == 0) 
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1336:        {
        -: 1337:            // move all cards from discard pile to deck 
     2000: 1338:            for (i = 0; i < state->discardCount[nextPlayer]; i++) 
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -: 1339:            {
        -: 1340:                // BUG (INTRODUCED) #1  -- should be   state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; 
     1000: 1341:                state->deck[nextPlayer][i] = state->deck[nextPlayer][i]; 
     1000: 1342:                state->deckCount[nextPlayer]++;
     1000: 1343:                state->discard[nextPlayer][i] = -1;
     1000: 1344:                state->discardCount[nextPlayer]--;
        -: 1345:            }
        -: 1346:            // shuffle deck
     1000: 1347:            shuffle(nextPlayer,state);
call    0 returned 100%
        -: 1348:        }
        -: 1349:        
        -: 1350:        // BUG (EXISTING) -- does not handle case of 1 card in deck, 1 needed from discard
        -: 1351:            
        -: 1352:        // reveal & discard top 2 deck cards                    // BUG (EXISTING) -- not discarding afterwards
     1002: 1353:        revCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1002: 1354:        state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1;   
     1002: 1355:        state->deckCount[nextPlayer]--;
     1002: 1356:        revCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1002: 1357:        state->deck[nextPlayer][state->deckCount[nextPlayer]-1] = -1;
     1002: 1358:        state->deckCount[nextPlayer]--;
        -: 1359:    }
        -: 1360:
        -: 1361:    // if revealed cards are duplicates, drop second
     4002: 1362:    if (revCards[0] == revCards[1])                             // BUG (EXISTING) -- will execute if no revealed cards, i.e., still {-1, -1}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1363:    {
     4002: 1364:        state->playedCards[state->playedCardCount] = revCards[1];
     4002: 1365:        state->playedCardCount++;
     4002: 1366:        revCards[1] = -1;
        -: 1367:    }
        -: 1368:
        -: 1369:    // complete appropriate bonus for each revealed card
    16008: 1370:    for (i = 0; i <= 2; i ++) {                                 // BUG (EXISTING) -- too many iterations, should be < 2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1371:        // treasure card
    12006: 1372:        if (revCards[i] == copper || revCards[i] == silver || revCards[i] == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -: 1373:        {   
        2: 1374:            state->coins += 2;
        -: 1375:        }
        -: 1376:        // BUG (INTRODUCED) #2 -- should be (revCards[i] == estate || revCards[i] == duchy || revCards[i] == province || revCards[i] == gardens || revCards[i] == great_hall)
        -: 1377:        // victory card
    12004: 1378:        else if (revCards[i] == estate || revCards[i] == duchy || revCards[i] == province)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -: 1379:        {  
    #####: 1380:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1381:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1382:        }
        -: 1383:        // action card
        -: 1384:        else                                                    // BUG (EXISTING) -- will get action bonus for nonexistent (-1) cards, should be another "else if"
        -: 1385:        { 
    12004: 1386:            state->numActions = state->numActions + 2;
        -: 1387:        }
        -: 1388:    }
        -: 1389:
     4002: 1390:    return 0;
        -: 1391:}
        -: 1392:
function playMine called 2 returned 100% blocks executed 44%
        2: 1393:int playMine(struct gameState* state, int currentPlayer, int trashCardPos, int trUpgrade, int handPos) {
        -: 1394:
        2: 1395:    int i = 0;
        -: 1396:    
        2: 1397:    int trToTrash = state->hand[currentPlayer][trashCardPos];
        -: 1398:
        -: 1399:    // card to trash not a treasure card
        -: 1400:    // BUG (INTRODUCED) #1 -- should be   if (trToTrash < copper || trToTrash > gold)
        2: 1401:    if (trToTrash < copper && trToTrash > gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -: 1402:    {
    #####: 1403:        return -1;
        -: 1404:    }
        -: 1405:    // upgrade card nonexistent
        2: 1406:    if (trUpgrade > treasure_map || trUpgrade < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1407:    {
    #####: 1408:        return -1;
        -: 1409:    }
        -: 1410:    // upgrade choice too expensive
        2: 1411:    if ( (getCost(trToTrash) + 3) > getCost(trUpgrade) )        // BUG (EXISTING) -- should be <
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 1412:    {
        2: 1413:        return -1;
        -: 1414:    }
        -: 1415:
        -: 1416:    // gain new treasure (directly to discard pile)
    #####: 1417:    gainCard(trUpgrade, state, 0, currentPlayer);               // BUG (EXISTING) -- flag should be 2 (gain card to hand) per Mine instructions
call    0 never executed
        -: 1418:
        -: 1419:    // locate & trash forfeited treasure
    #####: 1420:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1421:    {
    #####: 1422:        if (state->hand[currentPlayer][i] == trToTrash)
branch  0 never executed
branch  1 never executed
        -: 1423:        {
    #####: 1424:            discardCard(i, currentPlayer, state, 0);            // BUG (EXISTING) -- flag should be 1 for discard to trash
call    0 never executed
        -: 1425:            // BUG (INTRODUCED) # 2 -- should have   break;
        -: 1426:        }
        -: 1427:    }
        -: 1428:
    #####: 1429:    return 0;   
        -: 1430:}
        -: 1431:
        -: 1432:
        -: 1433://end of dominion.c
